source('~/datascience/ReproducibleResearch/plot2.R')
source('~/datascience/ReproducibleResearch/plot2.R')
source('~/datascience/ReproducibleResearch/plot2.R')
source('~/datascience/ReproducibleResearch/plot2.R')
?guides
source('~/datascience/ReproducibleResearch/plot2.R')
source('~/datascience/ReproducibleResearch/plot2.R')
log10(100)
source('~/datascience/ReproducibleResearch/plot2.R')
source('~/datascience/ReproducibleResearch/plot2.R')
install.packages("rmarkdown")
library("markdown", lib.loc="~/R/win-library/3.3")
install.packages("spam")
steps <- read.csv("activity.csv", header=TRUE)
getwd()
setwd("RepData_PeerAssessment1")
setwd("RepData_PeerAssessment1")
steps <- read.csv("activity.csv", header=TRUE)
rm(temp)
rm(i)
rm(n)
rm(plot_list)
rm(plot1)
rm(plto2)
rm(plot2)
rm(sp_payments)
rm(sp_states)
rm(payments)
rm(s)
rm(ny)
head(steps)
str(steps)
?as.Date
as.character(steps[1,2])
as.Date(steps[1,2])
steps$date <- as.Date(steps$date)
str(steps)
steps[steps$date=="2012-10-01",]
steps[steps$date=="2012-10-02",]
tail(steps)
steps[steps$date=="2012-11-30",]
steps_matrix <- as.matrix(steps, order_by=steps$date)
View(steps_matrix)
head(steps_matrix)
?aggregate
steps_agg <- aggregate(steps, steps ~ date, FUN=mean)
steps_agg <- aggregate(steps$steps, list(date = steps$date), FUN=mean, na.rm=TRUE)
View(steps_matrix)
View(steps_agg)
plot(steps_agg)
library(ggplot2)
stepsbydate <- aggregate(steps$steps, list(date = steps$date), FUN=mean, na.rm=TRUE)
stepsbydate[1,1]
stepsbydate[1,2]
is.na(stepsbydate[1,2])
stepsbydate <- stepsbydate[!is.na(stepsbydate$x),]
View(steps)
stepsbytime <- steps
stepsbytime$interval <- stepsbytime$interval%288
stepsbytime <- aggregate(stepsbytime$steps, list(interval = stepsbytime$interval), FUN=mean, na.rm=TRUE)
stepsbytime <- stepsbytime[!is.na(stepsbytime$x),]
plot2 <- ggplot(stepsbytime, aes(x = stepsbytime$interval, y = stepsbydate$x)) +
geom_line() +
ggtitle("Mean Steps per 5 minute interval") +
xlab("Interval") +
ylab("Mean Steps")
print(plot2)
stepsbytime <- steps
stepsbytime$interval <- stepsbytime$interval%%288
stepsbytime <- aggregate(stepsbytime$steps, list(interval = stepsbytime$interval), FUN=mean, na.rm=TRUE)
stepsbytime <- stepsbytime[!is.na(stepsbytime$x),]
plot2 <- ggplot(stepsbytime, aes(x = stepsbytime$interval, y = stepsbydate$x)) +
geom_line() +
ggtitle("Mean Steps per 5 minute interval") +
xlab("Interval") +
ylab("Mean Steps")
print(plot2)
stepsbytime <- steps
stepsbytime$interval <- stepsbytime$interval%%288
stepsbytime <- aggregate(stepsbytime$steps, list(interval = stepsbytime$interval), FUN=mean, na.rm=TRUE)
stepsbytime <- stepsbytime[!is.na(stepsbytime$x),]
plot2 <- ggplot(stepsbytime, aes(x = stepsbytime$interval, y = stepsbytime$x)) +
geom_line() +
ggtitle("Mean Steps per 5 minute interval") +
xlab("Interval") +
ylab("Mean Steps")
print(plot2)
?max
stepsbydate <- aggregate(steps$steps, list(date = steps$date), FUN=sum, na.rm=TRUE)
stepsbydate <- stepsbydate[!is.na(stepsbydate$x),]
plot1 <- ggplot(steps, aes(x = stepsbydate$date, y = stepsbydate$x)) +
geom_line() +
ggtitle("Total Steps per Day") +
xlab("Date") +
ylab("Steps")
print(plot1)
stepsmean <- mean(stepsbydate$x, na.rm=TRUE)
stepsmed <- median(stepsbydate$x, na.rm=TRUE)
View(stepsbydate)
length(stepsbydate$date)
length(stepsbydate$x)
stepsbydate <- aggregate(steps$steps, list(date = steps$date), FUN=sum, na.rm=TRUE)
stepsbydate <- stepsbydate[!is.na(stepsbydate$x),]
plot1 <- ggplot(steps, aes(x = date, y = x)) +
geom_line() +
ggtitle("Total Steps per Day") +
xlab("Date") +
ylab("Steps")
print(plot1)
stepsmean <- mean(stepsbydate$x, na.rm=TRUE)
stepsmed <- median(stepsbydate$x, na.rm=TRUE)
max(steps$steps)
max(steps$steps, na.rm=T)
which.max(stepsbytime$x)
which.max(stepsbytime$x,na.rm=T)
View(stepsbytime)
stepsbytime <- steps
stepsbytime$interval <- stepsbytime$interval%%288
stepsbytime_na <- aggregate(stepsbytime$steps, list(interval = stepsbytime$interval), FUN=mean, na.rm=FALSE)
stepsbytime <- aggregate(stepsbytime$steps, list(interval = stepsbytime$interval), FUN=mean, na.rm=TRUE)
stepsbytime <- stepsbytime[!is.na(stepsbytime$x),]
plot2 <- ggplot(stepsbytime, aes(x = stepsbytime$interval, y = stepsbytime$x)) +
geom_line() +
ggtitle("Mean Steps per 5 Minute Daily Interval") +
xlab("Interval") +
ylab("Mean Steps")
print(plot2)
max_interval <- which.max(stepsbytime_na$x) ### FINDING 0.... NEED TO SKIP
View(stepsbytime_na)
order(stepsbytime$x)[1]
?order
order(stepsbytime$x, decreasing=TRUE, na.last=TRUE)[1]
stepsbytime[220]
stepsbytime[220,]
steps_filled<-steps
View(steps_filled)
View(stepsbytime)
View(stepsbytime_na)
View(steps)
str(steps$interval)
steps$interval[5]
steps$interval["5"]
steps$interval==5
steps_filled <- steps
for(i in steps_filled) {
if (is.na(i$steps)){
steps_filled[steps_filled$interval==i$interval] <- stepsbytime$x[i$interval%%288]
}
}
io
i
i <- 5
steps_filled[5]
steps_filled[5,]
steps_filled[5,]$interval
steps_filled[5,]$interval%%288
levels(as.factor(steps$interval))
rm(steps)
rm(stepsbydate)
rm(stepsbytime)
rm(stepsbytime_na)
rm_steps_filled
rm(steps_filled)
rm(steps_matrix)
rm(plot1)
rm(plot2)
rm(i)
rm(max_interval)
rm(stepsmean)
rm(stepsmed)
rm(steps_agg)
step_data <- read.csv("activity.csv", header=TRUE)
step_data$date <- as.Date(step_data$date)
steps_by_date <- aggregate(steps ~ date, data = step_data, FUN=sum, na.rm=TRUE)
View(steps_by_date)
plot1 <- ggplot(steps_by_date, aes(x = steps_by_date$x)) +
geom_histogram(binwidth=1000, color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days")
print(plot1)
View(steps_by_date)
plot1 <- ggplot(steps_by_date, aes(x = steps_by_date$steps)) +
geom_histogram(binwidth=1000, color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days")
print(plot1)
stepsmean <- mean(steps_by_date$x, na.rm=TRUE)
stepsmed <- median(steps_by_date$x, na.rm=TRUE)
stepsmean <- mean(steps_by_date$steps, na.rm=TRUE)
stepsmed <- median(steps_by_date$steps, na.rm=TRUE)
steps_by_time_na <- aggregate(steps~interval, data = step_data, FUN=mean, na.rm=FALSE)
View(steps_by_time_na)
sum(is.na(steps_by_time_na$steps))
steps_by_time <- aggregate(steps~interval, data = step_data, FUN=mean)
steps_by_time <- aggregate(steps~interval, data = step_data, FUN=mean)
rm(steps_by_time_na)
plot2 <- ggplot(steps_by_time, aes(x = interval, y = steps)) +
geom_line() +
ggtitle("Mean Steps per 5 Minute Daily Interval") +
xlab("Interval") +
ylab("Mean Steps")
print(plot2)
max_interval <- steps_by_time[order(steps_by_time$steps, decreasing=TRUE, na.last=TRUE)[1],]
View(max_interval)
?scale_y_discrete
stepsmean
class(stepsmean)
sum(is.na(step_data$steps))
View(step_data)
steps_by_date <- aggregate(steps ~ date, data = step_data, FUN=sum)
View(steps_by_date)
sum(step_data[step_data$date=="2012-10-01",]$steps)
rm(steps_by_date)
steps_by_date <- aggregate(steps ~ date, data = step_data, FUN=sum)
View(steps_by_date)
steps_by_date <- aggregate(steps ~ date, data = step_data, FUN=sum, na.rm=FALSE)
View(steps_by_date)
?aggregate
steps_by_date <- aggregate(steps ~ date, data = step_data, FUN=sum, na.action=na.pass)
View(steps_by_date)
plot1 <- ggplot(steps_by_date, aes(x = steps_by_date$steps)) +
geom_histogram(binwidth=1000, color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot1)
steps_filled <- step_data
for(i in 1:nrow(steps_filled)) {
if (is.na(steps_filled[i,]$steps)){
steps_by_time[steps_by_time$interval==]
steps_filled[i,]$steps <- steps_by_time[steps_filled[i,]$interval,]$x
}
}
?merge
interv <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$interval
i<-1
interv <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$interval\
interv <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$interval
i <- 5
interv <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$interval
interv <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$steps
View(steps_by_time)
steps_filled <- step_data
for(i in 1:nrow(steps_filled)) {
if (is.na(steps_filled[i,]$steps)) {
steps_filled[i,]$steps <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$interval
}
}
sum(is.na(steps_filled$steps))
sum(is.na(step_data$steps))
View(steps_filled)
View(steps_filled)
rm(steps_filled)
rm(interv)
rm(i)
i <- 5
steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$steps
steps_filled <- step_data
steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$steps
View(steps_by_time)
i <- 127
steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$steps
steps_filled <- step_data
for(i in 1:nrow(steps_filled)) {
if (is.na(steps_filled[i,]$steps)) {
steps_filled[i,]$steps <- steps_by_time[steps_by_time$interval == steps_filled[i,]$interval,]$steps
}
}
View(steps_filled)
plot3 <- ggplot(steps_filled, aes(x = steps_filled$steps)) +
geom_histogram(binwidth=1000, color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
plot3 <- ggplot(steps_filled, aes(x = steps_filled$steps)) +
geom_histogram(color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
steps_filled <- merge(step_data, steps_by_time, by="interval")
View(steps_filled)
steps_filled <- merge(step_data, steps_by_time, by="interval", suffixes = c("", "_interval_mean"))
View(steps_filled)
View(steps_filled)
sum(is.na(steps_filled$steps))
steps_filled[is.na(steps_filled$steps)]$steps_interval_mean
steps_filled[is.na(steps_filled$steps),]$steps <- steps_filled[is.na(steps_filled$steps),]$steps_interval_mean
sum(is.na(steps_filled$steps))
View(steps_filled)
plot3 <- ggplot(steps_filled, aes(x = steps_filled$steps)) +
geom_histogram(color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
plot3 <- ggplot(steps_filled, aes(x = steps_filled$steps)) +
geom_histogram(color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
View(step_data)
steps_by_time[192,]
options(scipen = 10) # Force R not to print using scientific notation here
steps_mean <- mean(steps_filled$steps, na.rm=TRUE)
steps_median <- median(steps_filled$steps, na.rm=TRUE)
mean(steps_filled$steps)
median(steps_filled$steps)
steps_filled_by_date <- aggregate(steps ~ date, data = steps_filled, FUN=sum)
plot3 <- ggplot(steps_filled, aes(x = steps_filled$steps)) +
geom_histogram(color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
View(steps_filled_by_date)
steps_filled_by_date <- aggregate(steps ~ date, data = steps_filled, FUN=sum)
plot3 <- ggplot(steps_filled, aes(x = steps_filled_by_date$steps)) +
geom_histogram(color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
options(scipen = 10) # Force R not to print using scientific notation here
steps_mean <- mean(steps_filled_by_date$steps)
steps_median <- median(steps_filled_by_date$steps)
plot3 <- ggplot(steps_filled_by_date, aes(x = steps_filled_by_date$steps)) +
geom_histogram(color="black", fill="red") +
ggtitle("Total Steps per Day") +
xlab("Steps Taken") +
ylab("Frequency of Days") +
scale_y_continuous(breaks=1:9)
print(plot3)
options(scipen = 10) # Force R not to print using scientific notation here
steps_mean <- mean(steps_filled_by_date$steps)
steps_median <- median(steps_filled_by_date$steps)
?subset
step_data$day_type <- rep('weekday', nrow(step_data))
step_data$day_type[grep('Sat|Sun', weekdays(step_data$date))] <- "weekend"
step_data$day_type <- as.factor(step_data$day_type)
View(step_data)
steps_weekdays <- subset(step_data, day_type=="weekday")
steps_weekends <- subset(step_data, day_type=="weekend")
steps_by_weekdays <- aggregate(steps~interval, data = steps_weekdays, FUN=mean)
plot4 <- ggplot(steps_by_weekdays, aes(x = interval, y = steps)) +
geom_line() +
ggtitle("Mean Steps per 5 Minute Daily Interval") +
xlab("Interval") +
ylab("Mean Steps")
print(plot4)
steps_by_weekends <- aggregate(steps~interval, data = steps_weekends, FUN=mean)
plot5 <- ggplot(steps_by_weekends, aes(x = interval, y = steps)) +
geom_line() +
ggtitle("Mean Steps (Weekends") +
xlab("Interval") +
ylab("Mean Steps")
print(plot5)
?group_by
step_data$day_type <- rep('weekday', nrow(step_data))
step_data$day_type[grep('Sat|Sun', weekdays(step_data$date))] <- "weekend"
step_data$day_type <- as.factor(step_data$day_type)
steps_by_day_type <- step_data %>%
group_by(interval, day_type) %>%
summarize(mean_steps = mean(steps))
plot4 <- ggplot(steps_by_day_type, aes(x = interval, y = mean_steps)) +
geom_line() +
# ggtitle("Mean Steps (Weekdays)") +
xlab("Interval") +
ylab("Mean Steps")
print(plot4)
library(dplyr)
step_data$day_type <- rep('weekday', nrow(step_data))
step_data$day_type[grep('Sat|Sun', weekdays(step_data$date))] <- "weekend"
step_data$day_type <- as.factor(step_data$day_type)
steps_by_day_type <- step_data %>%
group_by(interval, day_type) %>%
summarize(mean_steps = mean(steps))
plot4 <- ggplot(steps_by_day_type, aes(x = interval, y = mean_steps)) +
geom_line() +
# ggtitle("Mean Steps (Weekdays)") +
xlab("Interval") +
ylab("Mean Steps")
print(plot4)
steps_by_day_type <-
step_data %>%
group_by(interval, day_type) %>%
summarize(mean_steps = mean(steps))
?summarize
steps_by_day_type <-
step_data %>%
group_by(interval, day_type) %>%
summarise(mean_steps = mean(steps))
View(steps_by_day_type)
plot4 <- ggplot(steps_by_day_type, aes(x = interval, y = mean_steps)) +
geom_line() +
# ggtitle("Mean Steps (Weekdays)") +
xlab("Interval") +
ylab("Mean Steps") +
facet_grid(mean_steps ~ .)
print(plot4)
plot4 <- ggplot(steps_by_day_type, aes(x = interval, y = mean_steps)) +
geom_line() +
facet_grid(mean_steps ~ .)
print(plot4)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps)) +
facet_grid(mean_steps ~ .)
print(plot4)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps)) +
facet_grid(. ~ mean_steps)
print(plot4)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps)) +
facet_grid(. ~ day_type)
print(plot4)
sessionInf()
sessionInfo()
library(dplyr)
step_data$day_type <- rep('weekday', nrow(step_data))
step_data$day_type[grep('Sat|Sun', weekdays(step_data$date))] <- "weekend"
step_data$day_type <- as.factor(step_data$day_type)
steps_by_day_type <-
step_data %>%
group_by(interval, day_type) %>%
summarise(mean_steps = mean(steps))
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps)) +
facet_grid(. ~ day_type)
print(plot4)
View(steps_by_day_type)
rm(steps_by_day_type)
rm(steps_by_weekdays)
rm(steps_by_weekends)
rm(steps_weekdays)
rm(steps_weekends)
rm(i)
rm(stepsmean)
rm(stepsmed)
rm(steps_mean)
rm(steps_median)
rm(plot1)
rm(plot2)
rm(plot3)
rm(plot5)
View(step_data)
steps_by_day_type <-
step_data %>%
group_by(interval, day_type) %>%
summarise(mean_steps = mean(steps))
View(steps_by_day_type)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps)) +
facet_grid(day_type ~ .)
print(plot4)
View(steps_by_date)
View(steps_by_time)
library(dplyr)
library(lubridate)
steps_by_day_type <-
step_data %>%
group_by(interval, day_type) %>%
summarise(mean_steps = mean(steps))
View(steps_by_day_type)
View(step_data)
steps_by_day_type <-
step_data %>%
group_by(interval, day_type) %>%
summarise(mean_steps = mean(steps, na.rm=TRUE))
View(steps_by_day_type)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps)) +
facet_grid(day_type ~ .)
print(plot4)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps), color=day_type) +
facet_grid(day_type ~ .) +
xlab("Interval") +
ylab("Mean Steps") +
labs(title="Mean Steps per 5 Minute Interval") +
theme_bw()
print(plot4)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps, color=day_type)) +
facet_grid(day_type ~ .) +
xlab("Interval") +
ylab("Mean Steps") +
labs(title="Mean Steps per 5 Minute Interval") +
theme_bw()
print(plot4)
plot4 <- ggplot(steps_by_day_type) +
geom_line(aes(interval, mean_steps, color=day_type), size = 1) +
facet_grid(day_type ~ .) +
xlab("Interval") +
ylab("Mean Steps") +
labs(title="Mean Steps per 5 Minute Interval") +
theme_bw() +
theme(legend.position = "none")
print(plot4)
?%>%
markdownHTMLOptions(default=TRUE)
